#!/usr/bin/env bash
# shellcheck disable=SC1091,SC1090
#
# Simple aur helper.
#
# Usage: ./saur pkg pkg pkg
export LC_ALL=C LANG=C
shopt -s extglob nocasematch nullglob
AUR_CACHE_DIR="${AUR_CACHE_DIR:-${HOME}/.cache/saur}"
mkdir -p "${AUR_CACHE_DIR}"

pkg_get() {
    cd "$AUR_CACHE_DIR" || exit 1

    for pkg in "$@"; do
        git clone --depth 1 --branch master --single-branch \
            "https://aur.archlinux.org/${pkg}.git" 2>/dev/null

        [[ -f "${pkg}/PKGBUILD" ]] || \
            { printf "%s\\n" "error: $pkg not found in AUR."; exit 1; }

        [[ -z "${BASH_ARGV[0]}" ]] && {
            pull="$(git -C "$pkg" pull 2>/dev/null)"
            printf "%s" "${pull/Already up to date.}"
        }
    done
}

pkg_check() {
    for pkg in "$@"; do
        cd "${AUR_CACHE_DIR}/${pkg}" || continue

        # TODO: This probably misses some files.
        for file in PKGBUILD *.sh *.desktop *.h *.install; do
            read -rn 1 -p "View $file for ${pkg}? [y/n] " yn; echo
            [[ "$yn" == y ]] && "${EDITOR:-vi}" "$file"
        done
    done
}

pkg_deps() {
    local deps aur_pkgs depends makedepends

    # Get the deps from the PKGBUILDS.
    for pkg in "$@"; do
        source "${AUR_CACHE_DIR}/${pkg}/PKGBUILD" 2>/dev/null || continue
        deps+=("${makedepends[@]//+(>=|<=|=|<|>)[0-9]*}"
               "${depends[@]//+(>=|<=|=|<|>)[0-9]*}")
    done

    # Log deps that aren't installed.
    readarray -t deps < <(pacman -Qq "${deps[@]}" 2>&1 >/dev/null)
    deps=("${deps[@]%\'*}")
    deps=("${deps[@]#*\'}")

    # All deps are installed, get out of here.
    [[ -z "${deps[0]}" ]] && return

    # If the deps aren't in local repositories, install them from the aur.
    for dep in "${deps[@]}"; do
        pacman -Ssq "$dep" >/dev/null || aur_pkgs+=("$dep")
    done

    (("${#deps[0]}" >= 2)) && pkg "${aur_pkgs[@]}"
}

pkg_install() {
    for pkg in "$@"; do
        cd "${AUR_CACHE_DIR}/${pkg}" && \
            makepkg -sfcCir "${FUNCNAME[2]/pkg_deps/--asdeps}"
    done
}

pkg_update() {
    cd "${AUR_CACHE_DIR}" || exit 1
    readarray -t pkgs <<< "$(pacman -Qem)"

    # Construct list of arguments to send to curl.
    printf -v urls "&arg[]=%s" "${pkgs[@]/ [0-9]*}"

    # Download all of the pkg data using curl to get latest version numbers.
    # This is much faster than using git pull in existing package repositories.
    curl -fs --fail-early -o "aur-versions" \
         -O "https://aur.archlinux.org/rpc/?v=5&type=info&${urls[*]:1}"\
        || { printf "%s\\n" "error: failed to download pkg info."; exit 1; }

    # Split the large json into each individual package.
    readarray -d "},{" -t json < "aur-versions"

    for i in "${!pkgs[@]}"; do
        pkg_name="${pkgs[$i]% *}"
        pkg_ver="${pkgs[$i]#* }"

        # Extract the version number from the json.
        data="${json[$i]}"
        aur_ver="${data#*\"Version\":\"}"
        aur_ver="${aur_ver%%\"*}"

        # vercmp is a program that comes with pacman.
        if (("$(vercmp "$pkg_ver" "$aur_ver")" == -1)); then
            printf "%s\\n" "${pkg_name}: $pkg_ver --> $aur_ver"
            aur_pkgs+=("$pkg_name")

        elif [[ "$pkg_name" =~ (-cvs$|-svn$|-hg$|-darcs$|-bzr$|-git$) ]]; then
            dev_pkgs+=("$pkg_name")
        fi
    done

    if [[ "${aur_pkgs[0]}" ]]; then
        read -rn 1 -p $'\n'"Update aur packages? [y/n] " yn; echo
        [[ "$yn" != "y" ]] && unset aur_pkgs
    else
        printf "%s\\n" "All aur packages up to date."
    fi

    if [[ "${dev_pkgs[0]}" ]]; then
        read -rn 1 -p "Update dev packages? (-git,..) [y/n] " yn; echo
        [[ "$yn" != "y" ]] && unset dev_pkgs
    fi

    pkg "${aur_pkgs[@]}" "${dev_pkgs[@]}"
}

pkg() {
    pkg_get "$@"
    pkg_check "$@"
    pkg_deps "$@"
    pkg_install "$@"
}

[[ "$1" ]] || pkg_update && pkg "$@"
