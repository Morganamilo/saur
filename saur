#!/usr/bin/env bash
# shellcheck disable=SC1091
#
# Simple aur helper.
#
# Usage: ./saur pkg pkg pkg
export LC_ALL=C
export LANG=C

shopt -s nullglob nocasematch

AUR_CACHE_DIR="${AUR_CACHE_DIR:-${HOME}/.cache/saur}"
mkdir -p "${AUR_CACHE_DIR}/update"


pkg_get() {
    # Download the PKGBUILD / Files.
    cd "$AUR_CACHE_DIR" || exit 1

    for pkg in "$@"; do
        git clone "https://aur.archlinux.org/${pkg}.git" 2>/dev/null || {
            cd "$pkg" || continue
            pull="$(git pull)"
            printf "%s" "${pull/Already up to date.}"
        }
    done
}


pkg_check() {
    # Check PKGBUILD / Files.
    for pkg in "$@"; do
        cd "${AUR_CACHE_DIR}/${pkg}" || continue

        for file in PKGBUILD *.sh *.desktop *.h *.install; do
            read -rn 1 -p "View $file for ${pkg}? [y/n] " yn; echo
            [[ "$yn" =~ y ]] && "${EDITOR:-vi}" "$file"
        done
    done
}


pkg_deps() {
    # Install any foreign deps.
    local depends
    local deps_aur

    for pkg in "$@"; do
        cd "${AUR_CACHE_DIR}/${pkg}" || continue
        . PKGBUILD 2>/dev/null || continue

        # $depends is sourced from the PKGBUILD file.
        depends=("${depends[@]//?=[0-9]*}")

        # Log deps that aren't installed.
        IFS=$'\n' read -d "" -ra depends \
            <<< "$(pacman -Q "${depends[@]}" 2>&1 >/dev/null)"

        depends=("${depends[@]%\'*}")
        depends=("${depends[@]#*\'}")

        # IF the deps aren't in the local repositories, install
        # them from the aur.
        for dep in "${depends[@]}"; do
            pacman -Ss "$dep" >/dev/null || deps_aur+=("$dep")
        done

        pkg "${deps_aur[@]}"
    done
}


pkg_install() {
    # Install packages.
    local as_dep

    # If the install function was called from 'pkg_deps',
    # append the '--asdeps' flag to 'makepkg'.
    [[ "${FUNCNAME[2]}" == "pkg_deps" ]] && as_dep="--asdeps"

    for pkg in "$@"; do
        cd "${AUR_CACHE_DIR}/${pkg}" && makepkg -sfcCi "$as_dep"
    done
}


pkg_update() {
    # Update packages.
    cd "${AUR_CACHE_DIR}/update" || exit 1

    IFS=$'\n' read -d "" -ra pkgs <<< "$(pacman -Qem)"
    url="https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h="

    for pkg in "${pkgs[@]}"; do
        urls+=("url=\"${url}${pkg% *}\"")
    done

    # Download all of the PKGBUILDs using curl to get latest
    # version numbers. This is much faster than using 'git pull'
    # in existing package repositories.
    curl -fs -L --remote-name-all -K <(echo "${urls[@]}")

    for pkg in "${pkgs[@]}"; do
        pkg_name="${pkg% *}"
        pkg_vers="${pkg#* }"
        pkg_vers="${pkg_vers#*:}"

        # Don't source the PKGBUILD but parse it as plain text.
        pkgbuild="$(< "${AUR_CACHE_DIR}/update/PKGBUILD?h=${pkg_name}")"

        # If the file failed to download, skip it.
        # This is ok since it happens in meta packages and the
        # real package will still be checked.
        [[ "$pkgbuild" == *"<!DOCTYPE html>"* ]] && continue

        aur_ver="${pkgbuild#*pkgver=}"
        aur_ver="${aur_ver/$'\n'*}"
        aur_rel="${pkgbuild#*pkgrel=}"
        aur_rel="${aur_rel/$'\n'*}"
        aur_full_ver="${aur_ver}${aur_rel:+-${aur_rel}}"

        # 'vercmp' is installed with 'pacman' and is used to
        # compare version numbers.
        (("$(vercmp "$pkg_vers" "$aur_full_ver")" == -1)) && \
            printf "%s\\n" "${pkg_name}: $pkg_vers --> $aur_full_ver"
    done
}


pkg() {
    # Main.
    pkg_get "$@"
    pkg_check "$@"
    pkg_deps "$@"
    pkg_install "$@"
}


[[ "$1" ]] || pkg_update && pkg "$@"
